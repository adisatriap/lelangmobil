name: Robot Framework Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
    Run-Test:
      runs-on: ubuntu-20.04
      steps:
        - name: Checkout repository
          uses: actions/checkout@v1
        - uses: actions/cache@v2
          id: cache
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirement.txt') }}
        - name: Install pip dependencies
          run: |
            pip install --upgrade pip
            pip install -r requirement.txt
        - name: Run Test
          run: python -m robot --outputdir results testcases/functional_tests
        - name: Run Test and create report
          run: python -m robot -d reports -x junit-report.xml "testcases/functional_tests"
        - name: Run Robot Framework tests and generate report
          run: |
             echo "ROBOT_RC=$?" >> "$GITHUB_ENV"  
        # - name: If Auto Test Pass Rate Not 100%, Job Will Fail
        #   if: env.ROBOT_RC != '0'
        #   run: |
        #     echo "Auto Test Pass Rate Not 100%, Please Check Test Result"
        #     exit 1
        - name: Publish test results
          uses: actions/upload-artifact@v2
          with:
            name: robot-test-results
            path: results        
        - name: Upload test results
          uses: actions/upload-artifact@v4
          if: always()
          with:
            name: robot-test-results-${{ matrix.browser }}-${{ matrix.python-version }}
            path: |
              results/
              *.html
          
        - name: Publish Robot Framework results
          uses: actions/upload-artifact@v4
          if: always()
          with:
            name: robot-reports-${{ matrix.browser }}-${{ matrix.python-version }}
            path: |
              results/report.html
              results/log.html
              results/output.xml
              
        - name: Comment PR with test results
          if: github.event_name == 'pull_request'
          uses: actions/github-script@v6
          with:
            script: |
              const fs = require('fs');
              const path = require('path');
              
              try {
                const outputXml = fs.readFileSync('results/output.xml', 'utf8');
                const passed = (outputXml.match(/passed="(\d+)"/) || [])[1] || 0;
                const failed = (outputXml.match(/failed="(\d+)"/) || [])[1] || 0;
                const skipped = (outputXml.match(/skipped="(\d+)"/) || [])[1] || 0;
                
                const comment = `## ü§ñ Robot Framework Test Results
                
                **Browser:** ${{ matrix.browser }}
                **Python Version:** ${{ matrix.python-version }}
                
                ‚úÖ **Passed:** ${passed}
                ‚ùå **Failed:** ${failed}
                ‚è≠Ô∏è **Skipped:** ${skipped}
                
                [View Detailed Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } catch (error) {
                console.log('Could not read test results:', error.message);
              }

    lint:
      runs-on: ubuntu-latest
      
      steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install Robot Framework linting tools
        run: |
          pip install robotframework-lint
          pip install robotframework-tidy
          
      - name: Lint Robot files
        run: |
          rflint --ignore TooManyTestSteps --ignore LineTooLong tests/ resources/
          
      - name: Format Robot files
        run: |
          robotidy tests/ resources/ --overwrite
  
    security:
      runs-on: ubuntu-latest
      
      steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: |
            safety-report.json
            bandit-report.json
